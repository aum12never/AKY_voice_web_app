# File: streamlit_app.py
# -*- coding: utf-8 -*-
import streamlit as st
import os
import json
from backend.aky_voice_backend import run_tts_generation
import time
from typing import Dict, Any
from pathlib import Path

# --- Configuration ---
PROFILES_FILE = "profiles_data.json"

# --- Persistent Storage Functions ---


def load_profiles_from_file() -> Dict:
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Profiles ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON"""
    try:
        if os.path.exists(PROFILES_FILE):
            with open(PROFILES_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data
    except Exception as e:
        st.warning(f"Could not load profiles: {e}")

    # Return default if file doesn't exist or error
    return {
        'profiles': {
            'Default': {
                'style_instructions': '',
                'main_text': '',
                'voice': 'Achernar - Soft',
                'temperature': 0.9,
                'filename': 'my_voiceover'
            }
        },
        'last_profile': 'Default'
    }


def save_profiles_to_file(data: Dict):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Profiles ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON"""
    try:
        with open(PROFILES_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        st.error(f"Could not save profiles: {e}")
        return False

# --- Profile Management Functions ---


def initialize_profiles():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Session State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Profiles"""
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
    saved_data = load_profiles_from_file()

    if 'profiles' not in st.session_state:
        st.session_state.profiles = saved_data['profiles']

    if 'current_profile' not in st.session_state:
        st.session_state.current_profile = saved_data.get(
            'last_profile', 'Default')

    # Initialize tracking for auto-save
    if 'last_saved_values' not in st.session_state:
        st.session_state.last_saved_values = {}

    # Flag to track if data needs saving
    if 'data_changed' not in st.session_state:
        st.session_state.data_changed = False


def get_current_profile_data() -> Dict[str, Any]:
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á Profile ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    return st.session_state.profiles.get(
        st.session_state.current_profile,
        st.session_state.profiles['Default']
    )


def save_to_current_profile(field: str, value: Any):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á Profile ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
    if st.session_state.current_profile in st.session_state.profiles:
        st.session_state.profiles[st.session_state.current_profile][field] = value

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        data_to_save = {
            'profiles': st.session_state.profiles,
            'last_profile': st.session_state.current_profile
        }
        save_profiles_to_file(data_to_save)


def create_new_profile(profile_name: str) -> bool:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Profile ‡πÉ‡∏´‡∏°‡πà"""
    if not profile_name or profile_name.strip() == '':
        return False

    profile_name = profile_name.strip()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if profile_name in st.session_state.profiles:
        return False

    # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Profile ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    current_data = get_current_profile_data()
    st.session_state.profiles[profile_name] = current_data.copy()
    st.session_state.current_profile = profile_name

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    data_to_save = {
        'profiles': st.session_state.profiles,
        'last_profile': st.session_state.current_profile
    }
    save_profiles_to_file(data_to_save)

    return True


def delete_profile(profile_name: str) -> bool:
    """‡∏•‡∏ö Profile (‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏ö Default)"""
    if profile_name == 'Default' or profile_name not in st.session_state.profiles:
        return False

    del st.session_state.profiles[profile_name]

    # ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö Profile ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Default
    if st.session_state.current_profile == profile_name:
        st.session_state.current_profile = 'Default'

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    data_to_save = {
        'profiles': st.session_state.profiles,
        'last_profile': st.session_state.current_profile
    }
    save_profiles_to_file(data_to_save)

    return True


def switch_profile(profile_name: str):
    """‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Profile ‡∏≠‡∏∑‡πà‡∏ô"""
    if profile_name in st.session_state.profiles:
        st.session_state.current_profile = profile_name

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å profile ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        data_to_save = {
            'profiles': st.session_state.profiles,
            'last_profile': st.session_state.current_profile
        }
        save_profiles_to_file(data_to_save)

# --- Auto-save Function ---


def auto_save_field(field_name: str, value: Any):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á"""
    current_key = f"{st.session_state.current_profile}_{field_name}"

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if st.session_state.last_saved_values.get(current_key) != value:
        save_to_current_profile(field_name, value)
        st.session_state.last_saved_values[current_key] = value

# --- Password Check Function ---


def check_password():
    """Returns `True` if the user had the correct password."""
    def password_entered():
        if st.session_state["password"] == st.secrets["APP_PASSWORD"]:
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else:
            st.session_state["password_correct"] = False

    if "password_correct" not in st.session_state:
        st.text_input(
            "Password", type="password", on_change=password_entered, key="password"
        )
        return False
    elif not st.session_state["password_correct"]:
        st.text_input(
            "Password", type="password", on_change=password_entered, key="password"
        )
        st.error("üòï Password incorrect")
        return False
    else:
        return True


# --- Main App ---
st.set_page_config(page_title="Affiliate Voice Generator Pro", layout="wide")

st.title("üéôÔ∏è Affiliate Voice Generator Pro")
st.write("---")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏≠‡∏õ
if check_password():

    # Initialize profiles system
    initialize_profiles()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡πÉ‡∏ô Secrets ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    try:
        api_key = st.secrets["GOOGLE_API_KEY"]
        if not api_key:
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GOOGLE_API_KEY ‡πÉ‡∏ô Streamlit Secrets")
            st.stop()
    except KeyError:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö GOOGLE_API_KEY ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Secrets!")
        st.stop()

    # --- Profile Management UI ---
    with st.container(border=True):
        st.subheader("üìÅ Profile Management")

        col_profile1, col_profile2, col_profile3 = st.columns([3, 2, 1])

        with col_profile1:
            # Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Profile
            profile_options = list(st.session_state.profiles.keys())
            current_index = profile_options.index(
                st.session_state.current_profile) if st.session_state.current_profile in profile_options else 0

            selected_profile = st.selectbox(
                "Select Profile:",
                options=profile_options,
                index=current_index,
                key="profile_selector",
                on_change=lambda: switch_profile(
                    st.session_state.profile_selector)
            )

        with col_profile2:
            # ‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ Profile ‡πÉ‡∏´‡∏°‡πà
            new_profile_name = st.text_input(
                "New Profile Name:",
                key="new_profile_input",
                placeholder="Enter profile name"
            )

        with col_profile3:
            st.write("")  # Spacer
            st.write("")  # Spacer
            # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° Profile
            if st.button("‚ûï Add Profile", use_container_width=True):
                if create_new_profile(new_profile_name):
                    st.success(f"‚úÖ Created profile: {new_profile_name}")
                    st.rerun()
                else:
                    st.error("Profile name is empty or already exists")

        # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö Profile (‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏•‡∏ö Default)
        if st.session_state.current_profile != 'Default':
            col_del1, col_del2, col_del3 = st.columns([1, 2, 1])
            with col_del2:
                if st.button(f"üóëÔ∏è Delete '{st.session_state.current_profile}' Profile",
                             type="secondary",
                             use_container_width=True):
                    if delete_profile(st.session_state.current_profile):
                        st.success("Profile deleted")
                        st.rerun()

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Profile ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    profile_data = get_current_profile_data()

    # --- Main UI ---
    with st.container(border=True):
        st.subheader("1. ‡πÉ‡∏™‡πà‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á")

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠ Profile ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ
        st.info(
            f"üìå Currently using profile: **{st.session_state.current_profile}**")

        col1, col2 = st.columns(2)
        with col1:
            style_instructions = st.text_area(
                "Style Instructions:",
                height=250,
                value=profile_data.get('style_instructions', ''),
                placeholder="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏û‡∏π‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô ‡∏™‡∏î‡πÉ‡∏™ ‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á",
                key="style_input",
                on_change=lambda: auto_save_field(
                    'style_instructions', st.session_state.style_input)
            )
        with col2:
            main_text = st.text_area(
                "Main Text (Script):",
                height=250,
                value=profile_data.get('main_text', ''),
                placeholder="‡πÉ‡∏™‡πà‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...",
                key="main_text_input",
                on_change=lambda: auto_save_field(
                    'main_text', st.session_state.main_text_input)
            )

    with st.container(border=True):
        st.subheader("2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå")

        col3, col4 = st.columns(2)
        with col3:
            # ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            gemini_voices_data = {
                "Zephyr": "Bright", "Puck": "Upbeat", "Charon": "Informative",
                "Kore": "Firm", "Fenrir": "Excitable", "Leda": "Youthful",
                "Orus": "Firm", "Aoede": "Breezy", "Callirrhoe": "Easy-going",
                "Autonoe": "Bright", "Enceladus": "Breathy", "Iapetus": "Clear",
                "Umbriel": "Easy-going", "Algieba": "Smooth", "Despina": "Smooth",
                "Erinome": "Clear", "Algenib": "Gravelly", "Rasalgethi": "Informative",
                "Laomedeia": "Upbeat", "Achernar": "Soft", "Alnilam": "Firm",
                "Schedar": "Even", "Gacrux": "Mature", "Pulcherrima": "Forward",
                "Achird": "Friendly", "Zubenelgenubi": "Casual", "Vindemiatrix": "Gentle",
                "Sadachbia": "Lively", "Sadaltager": "Knowledgeable", "Sulafat": "Warm"
            }
            voice_display_list = sorted(
                [f"{name} - {desc}" for name, desc in gemini_voices_data.items()])

            # ‡∏´‡∏≤ index ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
            saved_voice = profile_data.get('voice', 'Achernar - Soft')
            voice_index = voice_display_list.index(
                saved_voice) if saved_voice in voice_display_list else 20

            selected_voice_display = st.selectbox(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏≤‡∏Å‡∏¢‡πå:",
                options=voice_display_list,
                index=voice_index,
                key="voice_selector",
                on_change=lambda: auto_save_field(
                    'voice', st.session_state.voice_selector)
            )

            temperature = st.slider(
                "Temperature (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á):",
                min_value=0.0,
                max_value=2.0,
                value=profile_data.get('temperature', 0.9),
                step=0.1,
                key="temp_slider",
                on_change=lambda: auto_save_field(
                    'temperature', st.session_state.temp_slider)
            )

        with col4:
            output_filename = st.text_input(
                "‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• .mp3):",
                value=profile_data.get('filename', 'my_voiceover'),
                key="filename_input",
                on_change=lambda: auto_save_field(
                    'filename', st.session_state.filename_input)
            )

            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            st.caption("üíæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á")

    st.write("---")

# --- Generate Button ---
    if st.button("üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Generate Audio)", type="primary", use_container_width=True):

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å profile_data ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        if not profile_data.get('main_text', ''):
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á Main Text")
        else:
            with st.spinner("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà..."):
                try:
                    voice_name_for_api = profile_data.get('voice', 'Achernar - Soft').split(' - ')[0]
                    temp_output_folder = "temp_output"

                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Backend ‡πÇ‡∏î‡∏¢‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å profile_data ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    final_mp3_path = run_tts_generation(
                        api_key=api_key,
                        style_instructions=profile_data.get('style_instructions', ''),
                        main_text=profile_data.get('main_text', ''),
                        voice_name=voice_name_for_api,
                        output_folder=temp_output_folder,
                        output_filename=profile_data.get('filename', 'my_voiceover'),
                        temperature=profile_data.get('temperature', 0.9),
                        ffmpeg_path="ffmpeg"
                    )

                    st.success("üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    st.audio(final_mp3_path, format='audio/mp3')

                    with open(final_mp3_path, "rb") as file:
                        st.download_button(
                            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå MP3",
                            data=file,
                            file_name=os.path.basename(final_mp3_path),
                            mime="audio/mp3",
                            use_container_width=True
                        )

                except Exception as e:
                    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Debug ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                    with st.expander("üîç ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Error"):
                        st.code(str(e))
                        st.info("""
                        ‡∏´‡∏≤‡∏Å‡∏û‡∏ö Error ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö API:
                        1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API Key ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                        2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Quota ‡∏Ç‡∏≠‡∏á API
                        3. ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ text ‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
                        """)

    # --- Footer Info ---
    with st.expander("‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Profile"):
        st.info("""
        **üìÅ ‡∏£‡∏∞‡∏ö‡∏ö Profile:**
        - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Profile ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏°‡πâ‡∏õ‡∏¥‡∏î Browser ‡∏´‡∏£‡∏∑‡∏≠ Refresh ‡∏´‡∏ô‡πâ‡∏≤
        - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Profile ‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î
        - Profile 'Default' ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ
        
        **üîí ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢:**
        - API Key ‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô Streamlit Secrets (‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î)
        - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Profile ‡πÑ‡∏°‡πà‡∏°‡∏µ API Key ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
        - ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        """)

        # Debug Information (‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ)
        if st.checkbox("üîß ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Debug"):
            col_debug1, col_debug2 = st.columns(2)
            with col_debug1:
                st.write("**Profiles ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:**")
                st.json(st.session_state.profiles)
            with col_debug2:
                st.write("**Profile ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:**",
                         st.session_state.current_profile)
                st.write("**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Profile:**")
                st.json(profile_data)



