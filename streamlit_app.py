# File: streamlit_app.py (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Bug ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Profile ‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö)
# -*- coding: utf-8 -*-
import streamlit as st
import os
from backend.aky_voice_backend import run_tts_generation
import time

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ---
def check_password():
    """Returns `True` if the user had the correct password."""
    def password_entered():
        if st.session_state.get("password") == st.secrets["APP_PASSWORD"]:
            st.session_state["password_correct"] = True
            if "password" in st.session_state:
                del st.session_state["password"]
        else:
            st.session_state["password_correct"] = False

    if not st.session_state.get("password_correct", False):
        st.text_input("Password", type="password", on_change=password_entered, key="password")
        if not st.session_state.get("password_correct", False):
             st.error("üòï Password incorrect")
        return False
    return True

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡πÇ‡∏´‡∏•‡∏î" ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô UI ---
def load_profile_to_ui():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô State ‡∏Ç‡∏≠‡∏á UI"""
    profile_name = st.session_state.get('current_profile')
    if profile_name and profile_name in st.session_state.get('profiles', {}):
        profile_data = st.session_state.profiles[profile_name]
        st.session_state.ui_style_instructions = profile_data.get('style', '')
        st.session_state.ui_main_text = profile_data.get('script', '')
        st.session_state.ui_voice_select = profile_data.get('voice', 'Achernar - Soft')
        st.session_state.ui_temperature = profile_data.get('temp', 0.9)
        st.session_state.ui_output_filename = profile_data.get('filename', 'my_voiceover')
    else: # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        st.session_state.ui_style_instructions = ""
        st.session_state.ui_main_text = ""
        st.session_state.ui_voice_select = "Achernar - Soft"
        st.session_state.ui_temperature = 0.9
        st.session_state.ui_output_filename = "new_voice"

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å" ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å UI ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ---
def save_ui_to_profile():
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å State ‡∏Ç‡∏≠‡∏á UI ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà"""
    profile_name = st.session_state.get('current_profile')
    if profile_name and profile_name in st.session_state.get('profiles', {}):
        st.session_state.profiles[profile_name]['style'] = st.session_state.ui_style_instructions
        st.session_state.profiles[profile_name]['script'] = st.session_state.ui_main_text
        st.session_state.profiles[profile_name]['voice'] = st.session_state.ui_voice_select
        st.session_state.profiles[profile_name]['temp'] = st.session_state.ui_temperature
        st.session_state.profiles[profile_name]['filename'] = st.session_state.ui_output_filename

# --- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ ---
st.set_page_config(page_title="Affiliate Voice Generator AKYYY", layout="wide")
st.title("üéôÔ∏è Affiliate Voice Generator Pro AKY VVVV")
st.write("---")

if check_password():
    try:
        api_key = st.secrets["GOOGLE_API_KEY"]
    except KeyError:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö GOOGLE_API_KEY ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Secrets!")
        st.stop()

    # --- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á State ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á ---
    if 'ui_style_instructions' not in st.session_state:
        st.session_state.profiles = {}
        st.session_state.current_profile = None
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ State ‡∏Ç‡∏≠‡∏á UI
        load_profile_to_ui()

    # --- [‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á] ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ---
    if 'just_created_profile' in st.session_state:
        st.session_state.current_profile = st.session_state.just_created_profile
        del st.session_state.just_created_profile
        load_profile_to_ui()

    with st.sidebar:
        st.header("üë§ Profile Management")
        st.write("---")
        st.subheader("Select Profile")

        col1, col2 = st.columns([0.8, 0.2])
        
        with col1:
            profile_options = list(st.session_state.profiles.keys())
            if not profile_options:
                st.caption("No profiles yet.")
            else:
                st.selectbox(
                    "Select Profile:", options=profile_options, key='current_profile',
                    on_change=load_profile_to_ui, label_visibility="collapsed"
                )
        
        with col2:
            if st.session_state.current_profile:
                if st.button("üóëÔ∏è", key="delete_profile", help=f"Delete profile '{st.session_state.current_profile}'"):
                    profile_to_delete = st.session_state.current_profile
                    del st.session_state.profiles[profile_to_delete]
                    
                    remaining_profiles = list(st.session_state.profiles.keys())
                    st.session_state.current_profile = remaining_profiles[0] if remaining_profiles else None
                    
                    st.success(f'‡∏•‡∏ö Profile "{profile_to_delete}" ‡πÅ‡∏•‡πâ‡∏ß')
                    load_profile_to_ui()
                    st.rerun()

        st.write("---")
        st.subheader("Create New Profile")
        new_profile_name = st.text_input("New profile name:", key="new_profile_name_input")
        
        if st.button("Create and Save Current Settings"):
            if new_profile_name and new_profile_name not in st.session_state.profiles:
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å UI ‡∏•‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
                st.session_state.profiles[new_profile_name] = {
                    'style': st.session_state.ui_style_instructions,
                    'script': st.session_state.ui_main_text,
                    'voice': st.session_state.ui_voice_select,
                    'temp': st.session_state.ui_temperature,
                    'filename': st.session_state.ui_output_filename
                }
                # [‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á] ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                st.session_state.just_created_profile = new_profile_name
                st.success(f"Profile '{new_profile_name}' created!")
                st.rerun()
            else:
                st.warning("Please enter a unique profile name.")
    
    # --- ‡∏™‡πà‡∏ß‡∏ô UI ‡∏´‡∏•‡∏±‡∏Å ---
    with st.container(border=True):
        st.subheader("1. ‡πÉ‡∏™‡πà‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á")
        col1, col2 = st.columns(2)
        with col1:
            st.text_area("Style Instructions:", height=250, key='ui_style_instructions', on_change=save_ui_to_profile)
        with col2:
            st.text_area("Main Text (Script):", height=250, key='ui_main_text', on_change=save_ui_to_profile)

    with st.container(border=True):
        st.subheader("2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå")
        col3, col4 = st.columns(2)
        with col3:
            gemini_voices_data = {"Zephyr": "Bright", "Puck": "Upbeat", "Charon": "Informative", "Kore": "Firm", "Fenrir": "Excitable", "Leda": "Youthful", "Orus": "Firm", "Aoede": "Breezy", "Callirrhoe": "Easy-going", "Autonoe": "Bright", "Enceladus": "Breathy", "Iapetus": "Clear", "Umbriel": "Easy-going", "Algieba": "Smooth", "Despina": "Smooth", "Erinome": "Clear", "Algenib": "Gravelly", "Rasalgethi": "Informative", "Laomedeia": "Upbeat", "Achernar": "Soft", "Alnilam": "Firm", "Schedar": "Even", "Gacrux": "Mature", "Pulcherrima": "Forward", "Achird": "Friendly", "Zubenelgenubi": "Casual", "Vindemiatrix": "Gentle", "Sadachbia": "Lively", "Sadaltager": "Knowledgeable", "Sulafat": "Warm"}
            voice_display_list = sorted([f"{name} - {desc}" for name, desc in gemini_voices_data.items()])
            try:
                voice_index = voice_display_list.index(st.session_state.ui_voice_select)
            except ValueError:
                voice_index = 20
            st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏≤‡∏Å‡∏¢‡πå:", options=voice_display_list, index=voice_index, key='ui_voice_select', on_change=save_ui_to_profile)
            st.slider("Temperature:", min_value=0.0, max_value=2.0, step=0.1, key='ui_temperature', on_change=save_ui_to_profile)
        with col4:
            st.text_input("‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• .mp3):", key='ui_output_filename', on_change=save_ui_to_profile)

    st.write("---")

    if st.button("üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Generate Audio)", type="primary", use_container_width=True):
        if not st.session_state.ui_main_text:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á Main Text ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö")
        else:
            with st.spinner("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á..."):
                try:
                    voice_name_for_api = st.session_state.ui_voice_select.split(' - ')[0]
                    final_mp3_path = run_tts_generation(
                        api_key=api_key, style_instructions=st.session_state.ui_style_instructions,
                        main_text=st.session_state.ui_main_text, voice_name=voice_name_for_api,
                        output_folder="temp_output", output_filename=st.session_state.ui_output_filename,
                        temperature=st.session_state.ui_temperature, ffmpeg_path="ffmpeg"
                    )
                    st.success("üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    st.audio(final_mp3_path, format='audio/mp3')
                    with open(final_mp3_path, "rb") as file:
                        st.download_button(
                            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå MP3", data=file,
                            file_name=os.path.basename(final_mp3_path), mime="audio/mp3",
                            use_container_width=True
                        )
                except Exception as e:
                    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
